/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ShadowStrike {
  export type BattleRecordStruct = {
    id: BigNumberish;
    opponent: AddressLike;
    result: BytesLike;
    createdAt: BigNumberish;
  };

  export type BattleRecordStructOutput = [
    id: bigint,
    opponent: string,
    result: string,
    createdAt: bigint
  ] & { id: bigint; opponent: string; result: string; createdAt: bigint };

  export type PlayerStruct = {
    attack: BytesLike;
    defense: BytesLike;
    hp: BytesLike;
    registered: boolean;
    name: string;
  };

  export type PlayerStructOutput = [
    attack: string,
    defense: string,
    hp: string,
    registered: boolean,
    name: string
  ] & {
    attack: string;
    defense: string;
    hp: string;
    registered: boolean;
    name: string;
  };
}

export interface ShadowStrikeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "battle"
      | "battleCounter"
      | "battleHistory"
      | "getAllPlayers"
      | "getBattleHistory"
      | "getPlayer"
      | "isRegistered"
      | "playerAddresses"
      | "players"
      | "protocolId"
      | "registerPlayer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BattleResolvedEncrypted" | "PlayerRegistered"
  ): EventFragment;

  encodeFunctionData(functionFragment: "battle", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "battleCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "battleHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBattleHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayer",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "battle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "battleCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "battleHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattleHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayer",
    data: BytesLike
  ): Result;
}

export namespace BattleResolvedEncryptedEvent {
  export type InputTuple = [
    challenger: AddressLike,
    opponent: AddressLike,
    battleId: BigNumberish,
    encResult: BytesLike
  ];
  export type OutputTuple = [
    challenger: string,
    opponent: string,
    battleId: bigint,
    encResult: string
  ];
  export interface OutputObject {
    challenger: string;
    opponent: string;
    battleId: bigint;
    encResult: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [player: AddressLike, name: string];
  export type OutputTuple = [player: string, name: string];
  export interface OutputObject {
    player: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShadowStrike extends BaseContract {
  connect(runner?: ContractRunner | null): ShadowStrike;
  waitForDeployment(): Promise<this>;

  interface: ShadowStrikeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  battle: TypedContractMethod<[opponent: AddressLike], [string], "nonpayable">;

  battleCounter: TypedContractMethod<[], [bigint], "view">;

  battleHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        id: bigint;
        opponent: string;
        result: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getAllPlayers: TypedContractMethod<[], [string[]], "view">;

  getBattleHistory: TypedContractMethod<
    [player: AddressLike],
    [ShadowStrike.BattleRecordStructOutput[]],
    "view"
  >;

  getPlayer: TypedContractMethod<
    [player: AddressLike],
    [ShadowStrike.PlayerStructOutput],
    "view"
  >;

  isRegistered: TypedContractMethod<[player: AddressLike], [boolean], "view">;

  playerAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, boolean, string] & {
        attack: string;
        defense: string;
        hp: string;
        registered: boolean;
        name: string;
      }
    ],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  registerPlayer: TypedContractMethod<[name: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "battle"
  ): TypedContractMethod<[opponent: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "battleCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "battleHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        id: bigint;
        opponent: string;
        result: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBattleHistory"
  ): TypedContractMethod<
    [player: AddressLike],
    [ShadowStrike.BattleRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [player: AddressLike],
    [ShadowStrike.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, boolean, string] & {
        attack: string;
        defense: string;
        hp: string;
        registered: boolean;
        name: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerPlayer"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;

  getEvent(
    key: "BattleResolvedEncrypted"
  ): TypedContractEvent<
    BattleResolvedEncryptedEvent.InputTuple,
    BattleResolvedEncryptedEvent.OutputTuple,
    BattleResolvedEncryptedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;

  filters: {
    "BattleResolvedEncrypted(address,address,uint256,bytes32)": TypedContractEvent<
      BattleResolvedEncryptedEvent.InputTuple,
      BattleResolvedEncryptedEvent.OutputTuple,
      BattleResolvedEncryptedEvent.OutputObject
    >;
    BattleResolvedEncrypted: TypedContractEvent<
      BattleResolvedEncryptedEvent.InputTuple,
      BattleResolvedEncryptedEvent.OutputTuple,
      BattleResolvedEncryptedEvent.OutputObject
    >;

    "PlayerRegistered(address,string)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
  };
}
